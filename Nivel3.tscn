[gd_scene load_steps=15 format=2]

[ext_resource path="res://jabalina.tscn" type="PackedScene" id=1]
[ext_resource path="res://estadio2.png" type="Texture" id=2]
[ext_resource path="res://gamer.tscn" type="PackedScene" id=3]
[ext_resource path="res://Nivel3.gd" type="Script" id=4]
[ext_resource path="res://BeatFondo2.mp3" type="AudioStream" id=5]
[ext_resource path="res://Tubos.tscn" type="PackedScene" id=6]
[ext_resource path="res://Multiplicador.tscn" type="PackedScene" id=7]
[ext_resource path="res://Potenciador.tscn" type="PackedScene" id=8]
[ext_resource path="res://Diana.tscn" type="PackedScene" id=9]

[sub_resource type="Shader" id=11]
code = "// cloudy skies shader
// inspired from shadertoy shader made by Drift (https://www.shadertoy.com/view/4tdSWr) 
// https://godotshaders.com/shader/cloudy-skies/

shader_type canvas_item;

uniform float cloudscale = 1.5;
uniform float speed = 0.005;
uniform float clouddark  = 0.5;
uniform float cloudlight = 0.3;
uniform float cloudcover = 0.3;
uniform float cloudalpha = 8.0;
uniform float skytint = 0.5;
uniform vec3 skycolour1 = vec3(0.2, 0.4, 0.6);
uniform vec3 skycolour2 = vec3(0.4, 0.7, 1.0);
uniform mat2 m = mat2(vec2(-1.6,1.2),vec2(1.2,1.6)); // changement

// functions

vec2 hash( vec2 p ) {
                p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
                return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    float K1 = 0.366025404; // (sqrt(3)-1)/2;
    float K2 = 0.211324865; // (3-sqrt(3))/6;
                vec2 i = floor(p + (p.x+p.y)*K1); 
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
                vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
                vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));       
}

float fbm(vec2 n) {
                float total = 0.0, amplitude = 0.1;
                for (int i = 0; i < 7; i++) {
                               total += noise(n) * amplitude;
                               n = m * n;
                               amplitude *= 0.4;
                }
                return total;
}

// fragment shader

void fragment() {
vec2 res = 1.0 / SCREEN_PIXEL_SIZE;
vec2 p = FRAGCOORD.xy / res.xy; // changement
                vec2 uv = p*vec2(res.x/res.y,1.0);    // changement
    float time = TIME * speed ;
    float q = fbm(uv * cloudscale * 0.5);
    
    //ridged noise shape
    float r = 0.0;
    uv *= cloudscale;
    uv += q - time;
    float weight = 0.8;
    for (int i=0; i<8; i++){
        r += abs(weight*noise( uv ));
        uv = m*uv + time;
        weight *= 0.7;
    }
    
    //noise shape
    float f = 0.0;
    uv = p*vec2(res.x/res.y, 1.0); // changement
    uv *= cloudscale;
    uv += q - time;
    weight = 0.7;
    for (int i=0; i<8; i++){
        f += weight*noise( uv );
        uv = m*uv + time;
        weight *= 0.6;
    }
    f *= r + f;
    //noise colour
    float c = 0.0;
    time = TIME * speed * 2.0;
    uv = p*vec2(res.x/res.y,1.0); // changement
                uv *= cloudscale*2.0;
    uv += q - time;
    weight = 0.4;
    for (int i=0; i<7; i++){
        c += weight*noise( uv );
        uv = m*uv + time;
        weight *= 0.6;
    }
    
    //noise ridge colour
    float c1 = 0.0;
    time = TIME * speed * 3.0;
    uv = p*vec2(res.x/res.y,1.0);
    uv *= cloudscale*3.0;
    uv += q - time;
    weight = 0.4;
    for (int i=0; i<7; i++){
        c1 += abs(weight*noise( uv ));
        uv = m*uv + time;
        weight *= 0.6;
    }        
    c += c1;
    vec3 skycolour = mix(skycolour2, skycolour1, p.y);
    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight*c), 0.0, 1.0);
    f = cloudcover + cloudalpha*f*r;
    vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));
    COLOR.rgb = vec3(result); 
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 11 )
shader_param/cloudscale = 1.5
shader_param/speed = 0.02
shader_param/clouddark = 0.5
shader_param/cloudlight = 0.25
shader_param/cloudcover = 0.3
shader_param/cloudalpha = 8.0
shader_param/skytint = 0.5
shader_param/skycolour1 = Vector3( 0.2, 0.4, 0.6 )
shader_param/skycolour2 = Vector3( 0.4, 0.7, 1 )
shader_param/m = Transform2D( -1.6, 1.2, 1.2, 1.6, 0, 0 )

[sub_resource type="Shader" id=13]
code = "/*
	Floating Bubbles by PmkExpert
	Create floating and colliding bubbles using worley and color them with a gradient
	https://godotshaders.com/shader/floating-bubbles/

	MIT License
*/

shader_type canvas_item;

uniform float speed = 0.2; //How fast the bubbles move
uniform sampler2D gradient; //The gradient texture used to color the bubbles; if it's repeated, it should start and end with the same color
uniform vec4 background_color : hint_color = vec4(0.0, 0.0, 0.20, 0.50);
uniform vec2 grid_vec = vec2(1.0, 1.0); //How to repeat the gradient
uniform vec2 grid_bubbles = vec2(48.0, 48.0); //How many bubbles; can also make them oval

vec2 random(vec2 uv) {
	return vec2(fract(sin(dot(uv.xy,
		vec2(12.9898,78.233))) * 43758.5453123));
}

float worley(vec2 uv, float columns, float rows) {
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	float minimum_dist = 4.0;  
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);
			point = vec2( cos(TIME * point.x * speed), sin(TIME * point.y * speed) ) * 0.25 + 0.25;
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	return minimum_dist;
}

vec2 grid(vec2 uv, float columns, float rows){
	return fract(vec2(uv.x * columns, uv.y * rows));
}

void fragment() {
	vec2 repeat = grid(SCREEN_UV, grid_vec.x, grid_vec.y); //Divide in grid, used to repeat the gradient
	float worley = worley(SCREEN_UV, grid_bubbles.x, grid_bubbles.y); //Create bubbles
	vec4 multi_color = texture(gradient, vec2(repeat.y, worley)); //Use gradient colors; you can change to repeat.x for a horizontal repeat
	//You can change the float values here to modify the bubbles; don't ask for a mathematical explanation, I don't know
	COLOR.rgb = mix(0.5*vec3(worley) * multi_color.rgb * 2.0, background_color.rgb , smoothstep(0.4, 0.5, worley * 1.5)); //The weight controls the bubbles' rim and size
	//COLOR.rgb = mix(vec3(worley) * multi_color.rgb * 1.50, background_color.rgb , smoothstep(0.3, 0.5, worley * 1.0)); //The weight controls the bubbles' rim and size
	COLOR.a = texture(TEXTURE, UV).a; //Preserve the original texture's transparency
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 13 )
shader_param/speed = 0.2
shader_param/background_color = Color( 0, 0, 0.2, 0.5 )
shader_param/grid_vec = Vector2( 1, 1 )
shader_param/grid_bubbles = Vector2( 48, 48 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 767.5, 50 )

[node name="Nivel3" type="Node2D"]
script = ExtResource( 4 )

[node name="cielo" type="ColorRect" parent="."]
material = SubResource( 6 )
margin_right = 2173.0
margin_bottom = 232.0
color = Color( 0.694118, 0.941176, 0.945098, 1 )

[node name="estadio" type="TextureRect" parent="."]
modulate = Color( 1, 1, 1, 0.784314 )
use_parent_material = true
margin_right = 3092.0
margin_bottom = 600.0
texture = ExtResource( 2 )

[node name="people" type="ColorRect" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.835294 )
material = SubResource( 8 )
margin_left = -2.0
margin_top = 198.0
margin_right = 2168.0
margin_bottom = 375.0
color = Color( 0.0705882, 0.0627451, 0.192157, 1 )

[node name="suelo" type="StaticBody2D" parent="."]
scale = Vector2( 2.5, 1 )
collision_mask = 6

[node name="shape" type="CollisionShape2D" parent="suelo"]
position = Vector2( 512, 580 )
shape = SubResource( 2 )

[node name="pared" type="StaticBody2D" parent="."]
collision_mask = 2

[node name="shape" type="CollisionShape2D" parent="pared"]
position = Vector2( 2214, -139.5 )
rotation = 1.5708
shape = SubResource( 2 )

[node name="color" type="ColorRect" parent="pared"]
margin_left = 2164.0
margin_top = -17.0
margin_right = 2243.0
margin_bottom = 622.0
color = Color( 0.0235294, 0.0235294, 0.278431, 0.807843 )

[node name="linea" type="ColorRect" parent="."]
margin_left = 437.0
margin_top = 351.0
margin_right = 450.0
margin_bottom = 617.0
rect_rotation = -28.7
rect_pivot_offset = Vector2( 3.69525, 193.425 )
color = Color( 1, 1, 1, 0.32549 )

[node name="jabalina" parent="." instance=ExtResource( 1 )]
position = Vector2( 51, 456 )
collision_mask = 5

[node name="music" type="AudioStreamPlayer2D" parent="."]
position = Vector2( 154, 256 )
stream = ExtResource( 5 )
volume_db = -9.203
autoplay = true

[node name="gamer" parent="." instance=ExtResource( 3 )]
position = Vector2( 89, 456 )
collision_mask = 4
input_pickable = true

[node name="camera" type="Camera2D" parent="."]
position = Vector2( 89, 418 )
current = true
limit_left = 0
limit_top = 0
limit_right = 2170
limit_bottom = 600
limit_smoothed = true
smoothing_enabled = true

[node name="Potenciador" parent="." instance=ExtResource( 8 )]
position = Vector2( 577, 312 )

[node name="Potenciador2" parent="." instance=ExtResource( 8 )]
position = Vector2( 1185, 232 )

[node name="Tubos" parent="." instance=ExtResource( 6 )]
position = Vector2( 599, 16 )

[node name="Multiplicadorr" parent="." instance=ExtResource( 7 )]
position = Vector2( 1689, 237 )

[node name="Diana" parent="." instance=ExtResource( 9 )]
position = Vector2( 1636, 273 )
